forEach: BoundedContext
fileName: application.yml
path: {{name}}/src/main/resources
ifDuplicated: merge
---
spring:
  profiles: default2
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
  kafka:
    producer:
      retries: 5
      acks: all
      properties:
        enable:
          idempotence: true   # Set Producer exactly once Trx
    consumer:
      properties:
        spring.json.trusted.packages: "*"
        isolation.level: read_committed         
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
          transaction:
            transactionIdPrefix: tx-${random.uuid}   
        bindings:
          event-in:
            consumer:
              autoCommitOffset: false    # Disable Offset auto commit
              enableDlq: true
              dlqName: dlq-{{options.package}}
              dlqPartitions: 1         
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: {{name}}
##--< EDA / Topic Name
          destination: {{options.rootPackage}}
##--> EDA / Topic Name
          contentType: application/json
        event-out:
##--< EDA / Topic Name
          destination: {{options.rootPackage}}
##--> EDA / Topic Name
          contentType: application/json

logging:
  level:
    org.hibernate.type: trace
    org.springframework.cloud: debug

api:
  url:
  {{#sagaServiceUrl policies}}
    {{name}}: localhost:{{portGenerated}}
  {{/sagaServiceUrl}}

server:
  port: {{portGenerated}}
{{#if (checkException aggregates)}}
  error:
    include-message: always
{{/if}}

api:
  url:
    {{#sagaServiceUrl policies}}
    {{name}}: {{url name}}:8080
    {{/sagaServiceUrl}}


<function>
window.$HandleBars.registerHelper('sagaServiceUrl', function (policies, options) {
    let lists = [];
    let str = '';
    let policy = policies.find(x=>x.isSaga);
    if(policy){
        policy.outgoingCommandInfo.forEach(function(item) {
            if(item && item.commandValue && item.commandValue.boundedContext && !lists.find(x=>x.name == item.commandValue.boundedContext.name)){
                lists.push(item.commandValue.boundedContext);
            }
        });
    }
    
    lists.forEach(function(list){
        str += options.fn(list);
    });
    
    
    return str;
});

window.$HandleBars.registerHelper('checkException', function (aggregates) {
  try {
    if(!aggregates) {
        return false;
    }
    var res = false;
    for(var i = 0; i<aggregates.length; i++){
      if(aggregates[i].aggregateRoot.entities.elements) {
        Object.values(aggregates[i].aggregateRoot.entities.elements).forEach(function(item) {
          if(item) {
            if(item._type.endsWith('Exception')) {
              res = true;
            }
          }
        })
      }
    }
    return res;
  } catch(e){
    console.log(e)
  }
});

window.$HandleBars.registerHelper('checkCommandRelation', function (relationCommandInfo, options) {
    if(!relationCommandInfo){
      return options.inverse(this)
    }
    else{
      if(relationCommandInfo.length < 0){
        return options.inverse(this)
      }
      return options.fn(this)
    }
});

window.$HandleBars.registerHelper('setApiUrl', function (relationCommandInfo, isPortGen) {
  var text = "";
  relationCommandInfo.forEach(function(item) {
    if(!text.includes(item.commandValue.boundedContext.name)) {
      // text += "    " + item.commandValue.boundedContext.name + ": " + item.commandValue.boundedContext.name;
      text += "    " + item.commandValue.boundedContext.name + ": " + "localhost";
      if(isPortGen) {
        text += ":" + item.commandValue.boundedContext.portGenerated + "\n";
      } else {
        text += ":8080\n";
      }
    }
  })
  return text;
});

window.$HandleBars.registerHelper('toLowerCase', function(str) {
  return str.toLowerCase();
});
</function>
